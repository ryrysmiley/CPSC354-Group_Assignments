-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParNumbers
  ( happyError
  , myLexer
  , pExp
  , pExp1
  , pExp2
  , pExp3
  ) where

import Prelude

import qualified AbsNumbers
import LexNumbers

}

%name pExp Exp
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '%'      { PT _ (TS _ 1) }
  '('      { PT _ (TS _ 2) }
  ')'      { PT _ (TS _ 3) }
  '*'      { PT _ (TS _ 4) }
  '+'      { PT _ (TS _ 5) }
  '-'      { PT _ (TS _ 6) }
  '/'      { PT _ (TS _ 7) }
  '^'      { PT _ (TS _ 8) }
  '|'      { PT _ (TS _ 9) }
  L_integ  { PT _ (TI $$)  }

%%

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

Exp :: { AbsNumbers.Exp }
Exp
  : Exp '+' Exp1 { AbsNumbers.Plus $1 $3 }
  | Exp '-' Exp1 { AbsNumbers.Minus $1 $3 }
  | Exp1 { $1 }

Exp1 :: { AbsNumbers.Exp }
Exp1
  : Exp1 '*' Exp2 { AbsNumbers.Times $1 $3 }
  | Exp1 '/' Exp2 { AbsNumbers.Divide $1 $3 }
  | Exp1 '%' Exp2 { AbsNumbers.Mod $1 $3 }
  | Exp2 { $1 }

Exp2 :: { AbsNumbers.Exp }
Exp2
  : '-' Exp { AbsNumbers.Neg $2 }
  | '|' Exp '|' { AbsNumbers.Abs $2 }
  | Exp2 '^' Exp3 { AbsNumbers.Expo $1 $3 }
  | Exp3 { $1 }

Exp3 :: { AbsNumbers.Exp }
Exp3
  : '(' Exp ')' { AbsNumbers.Paren $2 }
  | Integer { AbsNumbers.Num $1 }
  | '(' Exp ')' { $2 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

