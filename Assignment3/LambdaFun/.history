:quit
รง
print (mergesort (cons 1 (cons 3 (cons 2 (cons 4 nil))))) ;;
merge (cons 1 (cons 3 nil)) (cons 2 (cons 4 nil)) ;;
mergesort (cons 6 (cons 4 (cons 2 nil))) ;;
:reload
mergesort (cons 6 (cons 4 (cons 2 nil))) ;;
mergesort (cons 6 (cons 4 (cons 2 nil))) ;;
:load test/sort.lc
:load test/sort.lc
mergesort (cons 6 (cons 4 (cons 2 nil))) ;;
:load test/sort.lc
:load test/sort.lc
:quit
:qiot
:quit
print (mergesort (cons 1 (cons 3 (cons 2 (cons 4 nil))))) ;;
mergesort (cons 1 (cons 3 (cons 2 (cons 4 nil)))) ;;
print (merge (cons 1 (cons 3 nil)) (cons 2 (cons 4 nil))) ;;
merge (cons 1 (cons 3 nil)) (cons 2 (cons 4 nil)) ;;
mergesort (insert 3 (insert 1 (insert 4 (insert 2 (insert 5 nil))))) ;;
:load test/sort.lc
:quit
mergesort (insert 3 (insert 1 (insert 4 (insert 2 (insert 5 nil))))) ;;
:load test/sort.lc
:load test/sort.lc
:quit
:reload
:reload
print(merge (insert 3 (insert 1 (insert 4 (insert 2 (insert 5 nil))))) (insert 3 (insert 2 nil))) ;;
merge (insert 3 (insert 1 (insert 4 (insert 2 (insert 5 nil))))) (insert 3 (insert 2 nil)) ;;
merge (insert 3 (insert 1 (insert 4 (insert 2 (insert 5 nil)))inser)( ;;
insert 3 (insert 1 (insert 4 (insert 2 (insert 5 nil))));;
insert 5 [1,2,3];;
merge [1,2,3] [4,5,6];;
:merge [1,2,3] [4,5,6];;
:reload
sort (cons 3 (cons 1 (cons 4 (cons 2 (cons 5 nil)))));;
print (sort (cons 6 (cons 4 (cons 2 nil))));;
:reload
print (sort (cons 6 (cons 4 (cons 2 nil))));;
print (insert 5 (insert 4 (insert 3 (insert 2 (insert 1 nil)))));;
insert 3 (insert 1 (insert 4 (insert 2 (insert 5 nil))));;
:load test/sort.lc
:quit
:reload
:reload
insert 3 (insert 1 (insert 4 (insert 2 (insert 5 nil))));;
insert 3 (insert 1 (insert 4 (insert 2 (insert 5 nil))));;
:reload
insert 3 (insert 1 (insert 4 (insert 2 (insert 5 nil))));;
insert 3 (insert 1 (insert 4 (insert 2 (insert 5 nil))));;
:reload
print (cons 6 (cons 2 ( cons 1 nil)));;
:reload
insert 3 (insert 1 (insert 4 (insert 2 (insert 5 nil))));;
nsert 3 (insert 1 (insert 4 (insert 2 (insert 5 nil))));;
:load test/sort.lc
:reload
print (insert 4 [1,2,3]);;
print (insert 4 [1,2,3]);;
insert 4 [1,2,3];;
:load test/sort.lc
:load test/sort.lc
:reload
:reload
print (insert 5 (insert 4 (insert 3 (insert 2 (insert 1 nil)))));;
print (insert 5 (insert 4 (insert 3 (insert 2 (insert 1 nil)))));;
insert 3 (insert 1 (insert 4 (insert 2 (insert 5 nil))));;
:reload
clera
:reload
sort (cons 3 (cons 1 (cons 4 (cons 2 (cons 5 [])))));;
sort (cons 3 (cons 1 (cons 4 (cons 2 (cons 5 )))));;
sort (cons 3 (cons 1 (cons 4 (cons 2 (cons 5 nil)))));;
:load test/sort.lc
:load test/exam.lc 
:reload
:reload
sort (cons 3 (cons 1 (cons 4 (cons 2 (cons 5 nil)))));;
print (insert 5 (insert 4 (insert 3 (insert 2 (insert 1 nil)))));;
insert 3 (insert 1 (insert 4 (insert 2 (insert 5 nil))));;
:reload
print (cons 6 (cons 4 (cons 2 nil)));;
print (cons 6 (cons 4 (cons 2 nil)));;
print (insert 5 (insert 4 (insert 3 (insert 2 (insert 1 nil)))));;
insert 3 (insert 1 (insert 4 (insert 2 (insert 5 nil))));;
insert 4 [4,5,1,4];;
insert 1 [2,3,4];;
insert 5 [1,2,3];;
:reload
sort (cons 3 (cons 1 (cons 4 (cons 2 (cons 5 nil)))));;
sort (cons 3 (cons 1 (cons 4 (cons 2 (cons 5 nil)))));;
(sort (cons 6 (cons 4 (cons 2 nil))));;
insert 3 (insert 1 (insert 4 (insert 2 (insert 5 nil))));;
:reload
insert 3 (insert 1 (insert 4 (insert 2 (insert 5 nil))));;รง
insert 3 (insert 1 (insert 4 (insert 2 (insert 5 nil))));;
insert 2 [];;
insert 2 []ll
