val nil = 
    let val a = new [] in 
    a := "NULL";
    a ;;

val cons = \e. \a. 
    let val b = new [] in
    b := [e,a];
    b ;;

val hd = \a.
    case !a of {
        "NULL" -> "tried to take the head of an empty list",  -- pattern match wtih "NULL", not with nil
        [e,a'] -> e 
    } ;;

val tl = \a.
    case !a of {
        "NULL" -> "tried to take the tail of an empty list",
        [e,a'] -> a'
    } ;;

-- `print (cons 6 (cons 4 (cons 2 nil)))` outputs [6,4,2]
rec print = \list.
    case !list of {
        "NULL" -> [],
        _ -> (hd list):(print (tl list))
    } ;;


-- Implement a function insert n list that inserts a number n into a linked list list of numbers.
rec insert = \n. \list.
    case !list of {
        "NULL" -> cons n nil,
        [e, a'] ->
            case n <= e of {
                true -> cons n list,
                _ -> cons e (insert n a')
            }
    } ;;

-- Implement insertion sort. That is, implement a function sort list that sorts a linked list list of numbers by repeatedly using insert
rec sort = \list.
    case !list of {
        "NULL" -> nil,
        [e, a'] -> insert e (sort a')
    } ;;

-- Implement a function merge list1 list2 that merges two lists into one
-- Using merge sort
rec merge = \list1. \list2.
    case !list1 of {
        "NULL" -> list2,
        [e1, a1'] ->
            case !list2 of {
                "NULL" -> list1,
                [e2, a2'] ->
                    case e1 <= e2 of {
                        true -> cons e1 (merge a1' list2),
                        _ -> cons e2 (merge list1 a2')
                    }
            }
    } ;;

-- Implement a function mergesort list that sorts a linked list list of numbers by repeatedly using merge
rec mergesort = \list.
    case !list of {
        "NULL" -> nil,
        [e, a'] ->
            case !a' of {
                "NULL" -> list,
                _ -> merge (mergesort (cons e nil)) (mergesort a')
            }
    } ;;

-- Output: [1,2,3,4,5]
print (insert 5 (insert 4 (insert 3 (insert 2 (insert 1 nil)))));;

-- Output: [2,4,6]
print (sort (cons 6 (cons 4 (cons 2 nil))));;

-- Output: [1,2,3,4]
print (merge (cons 1 (cons 3 nil)) (cons 2 (cons 4 nil)));;

-- Output: [1,2,3,4,5]
print (mergesort (cons 5 (cons 4 (cons 3 (cons 2 (cons 1 nil))))));;


-- DEBUGGING
{-
a = <address 1>
b = <address 2>
between = <address 5>
0 -> "NULL"
1 -> [7, <address 1>]
2 -> [2, <address 1>]
5 -> [7, <address 1>]
-}